import ExamManager from './exam-manager.js';
import Filters from './filters.js';
import Exam from './exam.js';

class App {

    constructor(examContainer, sidebarContainer) {
        // reference to the the exam container (HTML element)
        this.examContainer = examContainer;

        // init the exam manager and get the exam list
        this.examManager = new ExamManager();
        this.examManager.getPassedExams().then(exams => {
            
            // init the filter functionality
            this.filters = new Filters(sidebarContainer, this.examManager);
            // listening for the event generated by filters
            document.addEventListener('filter-selected', this.onFilterSelected);

            // init the form
            const addForm = document.getElementById('add-form');
            this.initForm(addForm);

            // finally, show all the exams (default)
            this.showExams(exams);

        });
    }

    /**
     * Init the "add exam" form and set up its callback
     * 
     * @param {*} form the HTML element representing the form
     */
    async initForm(form) {
        // init courses
        const courses = await this.examManager.getCourses();
        courses.forEach((c) => {
            form.course.appendChild(new Option(c.name, c.code));
        });
        
        // change credits according to the selected course
        form.course.addEventListener('change', function() {
            const selectedCourse = form.course.options[form.course.selectedIndex];
            form.credits.value = courses.find(course => course.name === selectedCourse.text).credits;
        });

        // set up form callback
        form.addEventListener('submit', this.onFormSubmitted);
    }

    /**
     * Custom event handler: receive and show the filtered exam list
     * @param {*} event 
     */
    onFilterSelected = (event) => {
        // empty the exam table
        if(this.examContainer.innerHTML !== '') {
            this.examContainer.innerHTML = '';
        }

        // show all the things!
        this.showExams(event.detail);
    }

    /**
     * Submit event handler
     * @param {*} event 
     */
    onFormSubmitted = async (event) => {
        event.preventDefault();
        document.getElementById('error-message').innerHTML = '';
        const form = event.target;
        const selectedCourse = form.course.options[form.course.selectedIndex];

        if(form.checkValidity()) {
            const exam = new Exam(selectedCourse.value, undefined, undefined, form.date.value, form.score.value);
            
            try {
                await this.examManager.addExam(exam);
                const exams = await this.examManager.getPassedExams();
                
                // refresh the user interface
                this.examContainer.innerHTML = '';
                this.showExams(exams);

            } catch(error) {
                if (error) {
                    const errorMsg = error.error;
                    // add an alert message in DOM
                    document.getElementById('error-message').innerHTML = `
        <div class="alert alert-danger alert-dismissible fade show" role="danger">
        <strong>Errore:</strong> <span>${errorMsg}</span> 
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        </div>`;
                }
            } finally {
                //reset the form and close the modal
                form.reset();
                document.getElementById('close-modal').click();
            }
        }
    }

    /**
     * Create the HTML table for showing the exams
     * @param {*} exams 
     */
    showExams(exams) {
        for(let exam of exams) {
            const tr = document.createElement('tr');

            const tdDate = document.createElement('td');
            tdDate.innerText = exam.date.format('DD/MM/YYYY');

            const tdName = document.createElement('td');
            tdName.innerText = exam.name;

            const tdCredits = document.createElement('td');
            tdCredits.innerText = exam.credits;

            const tdGrade = document.createElement('td');
            tdGrade.innerText = exam.score;

            tr.appendChild(tdDate);
            tr.appendChild(tdName);
            tr.appendChild(tdCredits);
            tr.appendChild(tdGrade);
            this.examContainer.appendChild(tr);
        }
    }
}

export default App;
